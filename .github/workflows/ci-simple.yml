name: ✅ CI/CD Pipeline (Simplified)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'

jobs:
  # ================================
  # 🧪 BUILD & TEST
  # ================================
  test:
    name: 🧪 Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        node-version: [18, 20]
        
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🏗️ Build Project
        run: npm run build

      - name: 🧪 Run Tests
        run: npm run test:unit
        env:
          NODE_ENV: test

      - name: 🛡️ Security Audit
        run: npm audit --audit-level=moderate || echo "⚠️ Audit completed with warnings"

  # ================================
  # 🐳 DOCKER BUILD (Main branch only)
  # ================================
  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ================================
  # ✅ SUCCESS NOTIFICATION
  # ================================
  success:
    name: ✅ Pipeline Success
    runs-on: ubuntu-latest
    needs: [test]
    if: always() && needs.test.result == 'success'
    
    steps:
      - name: 🎉 Success Notification
        run: |
          echo "🎉 CI/CD Pipeline completed successfully!"
          echo "✅ All tests passed"
          echo "🔍 Security audit completed"
          echo "🏗️ Build successful"
