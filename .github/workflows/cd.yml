# =========================================
# CI/CD Pipeline Analyzer - CD Workflow  
# Continuous Deployment for staging and production
# =========================================

name: CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_run:
    workflows: ["CI Pipeline"]
    types: [completed]
    branches: [ main ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # === Only run if CI passed ===
  check-ci:
    name: ‚úÖ Verify CI Status
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.ref_type == 'tag'
    outputs:
      deploy: ${{ steps.check.outputs.deploy }}
    steps:
      - name: Check CI status
        id: check
        run: |
          if [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]] || [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "deploy=true" >> $GITHUB_OUTPUT
            echo "‚úÖ CI passed, proceeding with deployment"
          else
            echo "deploy=false" >> $GITHUB_OUTPUT
            echo "‚ùå CI failed, skipping deployment"
          fi

  # === Build and Push Container ===
  build-and-push:
    name: üê≥ Build & Push Container
    runs-on: ubuntu-latest
    needs: check-ci
    if: needs.check-ci.outputs.deploy == 'true'
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix=sha-

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output image
        id: image
        run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}" >> $GITHUB_OUTPUT

  # === Deploy to Staging ===
  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: [check-ci, build-and-push]
    if: needs.check-ci.outputs.deploy == 'true' && github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.cicd-analyzer.yourdomain.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to staging
        run: |
          # Update image in deployment
          kubectl set image deployment/cicd-analyzer \
            cicd-analyzer=${{ needs.build-and-push.outputs.image }} \
            -n staging
          
          # Wait for rollout
          kubectl rollout status deployment/cicd-analyzer -n staging --timeout=300s

      - name: Run smoke tests
        run: |
          # Wait for service to be ready
          sleep 30
          
          # Basic health check
          curl -f https://staging.cicd-analyzer.yourdomain.com/health
          
          # API endpoint test
          curl -f https://staging.cicd-analyzer.yourdomain.com/api/v1/pipelines \
            -H "Authorization: Bearer ${{ secrets.STAGING_API_TOKEN }}"

      - name: Notify staging deployment
        run: |
          echo "‚úÖ Successfully deployed to staging"
          echo "üîó Staging URL: https://staging.cicd-analyzer.yourdomain.com"

  # === Security Scan ===
  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: needs.check-ci.outputs.deploy == 'true'
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-and-push.outputs.image }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # === Deploy to Production ===
  deploy-production:
    name: üè≠ Deploy to Production
    runs-on: ubuntu-latest
    needs: [check-ci, build-and-push, deploy-staging, security-scan]
    if: needs.check-ci.outputs.deploy == 'true' && startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://cicd-analyzer.yourdomain.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Pre-deployment backup
        run: |
          # Create database backup
          kubectl exec deployment/postgres -n production -- \
            pg_dump -U postgres cicd_analyzer > backup-$(date +%Y%m%d-%H%M%S).sql

      - name: Deploy to production
        run: |
          # Blue-green deployment strategy
          kubectl apply -f k8s/production/ -n production
          
          # Update image in deployment
          kubectl set image deployment/cicd-analyzer \
            cicd-analyzer=${{ needs.build-and-push.outputs.image }} \
            -n production
          
          # Wait for rollout
          kubectl rollout status deployment/cicd-analyzer -n production --timeout=600s

      - name: Run production health checks
        run: |
          # Wait for service to be ready
          sleep 60
          
          # Comprehensive health check
          curl -f https://cicd-analyzer.yourdomain.com/health
          
          # Database connectivity test
          curl -f https://cicd-analyzer.yourdomain.com/api/v1/health/database \
            -H "Authorization: Bearer ${{ secrets.PRODUCTION_API_TOKEN }}"
          
          # Redis connectivity test
          curl -f https://cicd-analyzer.yourdomain.com/api/v1/health/redis \
            -H "Authorization: Bearer ${{ secrets.PRODUCTION_API_TOKEN }}"

      - name: Run post-deployment tests
        run: |
          # API functionality tests
          curl -f https://cicd-analyzer.yourdomain.com/api/v1/pipelines \
            -H "Authorization: Bearer ${{ secrets.PRODUCTION_API_TOKEN }}"
          
          # Analytics endpoint test
          curl -f https://cicd-analyzer.yourdomain.com/api/v1/analytics/dashboard \
            -H "Authorization: Bearer ${{ secrets.PRODUCTION_API_TOKEN }}"

      - name: Notify production deployment
        run: |
          echo "üéâ Successfully deployed to production!"
          echo "üîó Production URL: https://cicd-analyzer.yourdomain.com"

  # === Rollback on Failure ===
  rollback:
    name: ‚è™ Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: failure() && needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure'
    
    steps:
      - name: Rollback staging
        if: needs.deploy-staging.result == 'failure'
        run: |
          kubectl rollout undo deployment/cicd-analyzer -n staging
          kubectl rollout status deployment/cicd-analyzer -n staging

      - name: Rollback production
        if: needs.deploy-production.result == 'failure'
        run: |
          kubectl rollout undo deployment/cicd-analyzer -n production
          kubectl rollout status deployment/cicd-analyzer -n production

      - name: Notify rollback
        run: |
          echo "‚ö†Ô∏è Deployment failed, rollback completed"

  # === Post-deployment Monitoring ===
  post-deployment:
    name: üìä Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success()
    
    steps:
      - name: Setup monitoring alerts
        run: |
          # Enable enhanced monitoring for 1 hour after deployment
          echo "üìä Enhanced monitoring enabled for 1 hour"

      - name: Performance baseline
        run: |
          # Run performance tests to establish post-deployment baseline
          echo "‚ö° Running performance baseline tests"

      - name: Deployment summary
        run: |
          echo "üéØ Deployment Summary:"
          echo "- Image: ${{ needs.build-and-push.outputs.image }}"
          echo "- Environment: production"
          echo "- Status: ‚úÖ Success"
          echo "- Time: $(date)"
