# =========================================
# CI/CD Pipeline Analyzer - CI Workflow
# Continuous Integration with testing, linting, and security checks
# =========================================

name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'

jobs:
  # === Code Quality Checks ===
  lint-and-format:
    name: 🔍 Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check TypeScript compilation
        run: npm run build

      - name: Check code formatting
        run: npm run format:check

  # === Security Audit ===
  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for vulnerabilities
        run: npm audit --audit-level=high --dry-run

  # === Unit Tests ===
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: cicd_analyzer_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "NODE_ENV=test" >> .env.test
          echo "DATABASE_URL=postgres://test_user:test_password@localhost:5433/cicd_analyzer_test" >> .env.test
          echo "REDIS_URL=redis://localhost:6379" >> .env.test

      - name: Run database migrations
        run: npm run db:migrate
        env:
          NODE_ENV: test

      - name: Run unit tests
        run: npm test -- --coverage --detectOpenHandles
        env:
          NODE_ENV: test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # === Integration Tests ===
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [lint-and-format, security-audit]
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: cicd_analyzer_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "NODE_ENV=test" >> .env.test
          echo "DATABASE_URL=postgres://test_user:test_password@localhost:5433/cicd_analyzer_test" >> .env.test
          echo "REDIS_URL=redis://localhost:6379" >> .env.test

      - name: Build application
        run: npm run build

      - name: Run database migrations
        run: npm run db:migrate
        env:
          NODE_ENV: test

      - name: Start application
        run: npm start &
        env:
          NODE_ENV: test

      - name: Wait for application
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:3000/health; do sleep 1; done'

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test

  # === Build and Package ===
  build:
    name: 🏗️ Build & Package
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Build Docker image
        run: |
          docker build -t cicd-pipeline-analyzer:${{ github.sha }} .
          docker tag cicd-pipeline-analyzer:${{ github.sha }} cicd-pipeline-analyzer:latest

      - name: Test Docker image
        run: |
          docker run --rm -d --name test-app \
            -p 3000:3000 \
            -e NODE_ENV=production \
            cicd-pipeline-analyzer:${{ github.sha }}
          
          sleep 10
          curl -f http://localhost:3000/health || exit 1
          docker stop test-app

      - name: Save Docker image
        run: docker save cicd-pipeline-analyzer:latest > cicd-app.tar

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            cicd-app.tar
          retention-days: 7

  # === Performance Tests ===
  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Load Docker image
        run: docker load < cicd-app.tar

      - name: Run performance tests
        run: |
          docker run --rm -d --name perf-test \
            -p 3000:3000 \
            -e NODE_ENV=production \
            cicd-pipeline-analyzer:latest
          
          sleep 10
          
          # Install k6 for load testing
          sudo apt-get update
          sudo apt-get install -y k6
          
          # Run basic load test
          k6 run --vus 10 --duration 30s scripts/load-test.js

      - name: Cleanup
        run: docker stop perf-test

# === Workflow Status Notifications ===
  notify:
    name: 📢 Notify Status
    runs-on: ubuntu-latest
    needs: [lint-and-format, security-audit, unit-tests, integration-tests, build]
    if: always()
    
    steps:
      - name: Workflow Status
        run: |
          if [[ "${{ needs.lint-and-format.result }}" == "success" && \
                "${{ needs.security-audit.result }}" == "success" && \
                "${{ needs.unit-tests.result }}" == "success" && \
                "${{ needs.integration-tests.result }}" == "success" && \
                "${{ needs.build.result }}" == "success" ]]; then
            echo "✅ All CI checks passed!"
          else
            echo "❌ CI pipeline failed"
            exit 1
          fi
